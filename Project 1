Q1. When is the best time of day, day of the week, and time of year to fly to minimise delays? 

import pandas as pd
import matplotlib.pyplot as plt

'''
Q1. When is the best time of day, day of the week, and time of year to fly to minimise delays? 
Years used: 1988 and 1989
Data was split into seasons to make processing faster and easier
Data is filtered for negative ArrDelay to retain flights that arrive early therefore minimising delays.
'''
data_1988 = pd.read_csv(r'C:\Users\HOME\Desktop\2195 Programming Coursework\1988.csv.bz2')

# Filter for 1988 Spring (Mar to May) and ArrDelay < 0
df_1988_Spring = pd.DataFrame(data_1988, columns=['Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'ArrTime', 'CRSArrTime', 'ArrDelay'])
df_1988_Spring = df_1988_Spring[(df_1988_Spring['Month'] >= 3) & (df_1988_Spring['Month'] <= 5)]
df_1988_Spring = df_1988_Spring[df_1988_Spring['ArrDelay'] < 0]
print(df_1988_Spring)

## Scatterplot for 1988 Spring (time of day)
x = [df_1988_Spring['ArrDelay']]
y = [df_1988_Spring['DepTime']]
plt.xlabel('ArrDelay')
plt.ylabel('DepTime')
plt.title('Plot of plane arrival delays over 24 hours in spring')
plt.plot(x, y, 'o', color='black')
plt.show()

### Scatterplot for 1988 Spring (day of the week)
x = [df_1988_Spring['ArrDelay']]
y = [df_1988_Spring['DayOfWeek']]
plt.xlabel('ArrDelay')
plt.ylabel('DayOfWeek')
plt.title('Best time of the week in spring 1988')
plt.plot(x, y, 'o', color='black')

### Count for 1988 Spring early arrivals (day of the week)
Count_Of_1988_Spring_Weekly_Arrivals = df_1988_Spring.groupby(['DayOfWeek'])['DayOfWeek'].count()
print(Count_Of_1988_Spring_Weekly_Arrivals)

#### Count for 1988 Spring early arrivals (time of year)
Count_Of_1988_Spring_Monthly_Arrivals = df_1988_Spring.groupby(['Month'])['Month'].count()
print(Count_Of_1988_Spring_Monthly_Arrivals)

# Filter for 1988 Summer (Jun to Aug) and ArrDelay < 0
df_1988_Summer = pd.DataFrame(data_1988, columns=['Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'ArrTime', 'CRSArrTime', 'ArrDelay'])
df_1988_Summer = df_1988_Summer[(df_1988_Summer['Month'] >= 6) & (df_1988_Summer['Month'] <= 8)]
df_1988_Summer = df_1988_Summer[df_1988_Summer['ArrDelay'] < 0]
print(df_1988_Summer)

##Scatterplot for 1988 Summer (time of day)
x = [df_1988_Summer['ArrDelay']]
y = [df_1988_Summer['DepTime']]
plt.xlabel('ArrDelay')
plt.ylabel('DepTime')
plt.title('Plot of plane arrival delays over 24 hours in summer')
plt.plot(x, y, 'o', color='black')

### Scatterplot for 1988 Summer (day of the week)
x = [df_1988_Summer['ArrDelay']]
y = [df_1988_Summer['DayOfWeek']]
plt.xlabel('ArrDelay')
plt.ylabel('DayOfWeek')
plt.title('Plot of plane arrival delays over 7 days in spring')
plt.plot(x, y, 'o', color='black')

### Count for 1988 Summer early arrivals (day of the week)
Count_Of_1988_Summer_Weekly_Arrivals = df_1988_Summer.groupby(['DayOfWeek'])['DayOfWeek'].count()
print(Count_Of_1988_Summer_Weekly_Arrivals)

#### Count for 1988 Summer early arrivals (time of year)
Count_Of_1988_Summer_Monthly_Arrivals = df_1988_Summer.groupby(['Month'])['Month'].count()
print(Count_Of_1988_Summer_Monthly_Arrivals)

# Filter for 1988 Autumn (Sep to Nov) and ArrDelay < 0
df_1988_Autumn = pd.DataFrame(data_1988, columns=['Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'ArrTime', 'CRSArrTime', 'ArrDelay'])
df_1988_Autumn = df_1988_Autumn[(df_1988_Autumn['Month'] >= 9) & (df_1988_Autumn['Month'] <= 11)]
df_1988_Autumn = df_1988_Autumn[df_1988_Autumn['ArrDelay'] < 0]
print(df_1988_Autumn)

## Scatterplot for 1988 Autumn (time of day)
x = [df_1988_Autumn['ArrDelay']]
y = [df_1988_Autumn['DepTime']]
plt.xlabel('ArrDelay')
plt.ylabel('DepTime')
plt.title('Plot of plane arrival delays over 24 hours in autumn')
plt.plot(x, y, 'o', color='black')

### Scatterplot for 1988 Autumn (day of the week)
x = [df_1988_Autumn['ArrDelay']]
y = [df_1988_Autumn['DayOfWeek']]
plt.xlabel('ArrDelay')
plt.ylabel('DayOfWeek')
plt.title('Plot of plane arrival delays over 7 days in autumn')
plt.plot(x, y, 'o', color='black')

### Count for 1988 Autumn early arrivals (day of the week)
Count_Of_1988_Autumn_Weekly_Arrivals = df_1988_Autumn.groupby(['DayOfWeek'])['DayOfWeek'].count()
print(Count_Of_1988_Autumn_Weekly_Arrivals)

#### Count for 1988 Autumn early arrivals (time of year)
Count_Of_1988_Autumn_Monthly_Arrivals = df_1988_Autumn.groupby(['Month'])['Month'].count()
print(Count_Of_1988_Autumn_Monthly_Arrivals)

# Filter for 1988 Winter (Dec to Feb) and ArrDelay < 0
df_1988_Winter = pd.DataFrame(data_1988, columns=['Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'ArrTime', 'CRSArrTime', 'ArrDelay'])
df_1988_Winter = df_1988_Winter[(df_1988_Winter['Month'] >= 12) | (df_1988_Winter['Month'] <= 2)]
df_1988_Winter = df_1988_Winter[df_1988_Winter['ArrDelay'] < 0]
print(df_1988_Winter)

## Scatterplot for 1988 Winter (time of day)
x = [df_1988_Winter['ArrDelay']]
y = [df_1988_Winter['DepTime']]
plt.xlabel('ArrDelay')
plt.ylabel('DepTime')
plt.title('Plot of plane arrival delays over 24 hours in winter')
plt.plot(x, y, 'o', color='black')

### Scatterplot for 1988 Winter (day of the week)
x = [df_1988_Winter['ArrDelay']]
y = [df_1988_Winter['DayOfWeek']]
plt.xlabel('ArrDelay')
plt.ylabel('DayOfWeek')
plt.title('Plot of plane arrival delays over 7 days in winter')
plt.plot(x, y, 'o', color='black')

### Count for 1988 Winter early arrivals (day of the week)
Count_Of_1988_Winter_Weekly_Arrivals = df_1988_Winter.groupby(['DayOfWeek'])['DayOfWeek'].count()
print(Count_Of_1988_Winter_Weekly_Arrivals)

#### Count for 1988 Winter early arrivals (time of year)
Count_Of_1988_Winter_Monthly_Arrivals = df_1988_Winter.groupby(['Month'])['Month'].count()
print(Count_Of_1988_Winter_Monthly_Arrivals)

data_1989 = pd.read_csv(r'C:\Users\HOME\Desktop\2195 Programming Coursework\1989.csv.bz2')

# Filter for 1989 Spring (Mar to May) and ArrDelay < 0
df_1989_Spring = pd.DataFrame(data_1989, columns=['Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'ArrTime', 'CRSArrTime', 'ArrDelay'])
df_1989_Spring = df_1989_Spring[(df_1989_Spring['Month'] >= 3) & (df_1989_Spring['Month'] <= 5)]
df_1989_Spring = df_1989_Spring[df_1989_Spring['ArrDelay'] < 0]
print(df_1989_Spring)

## Scatterplot for 1989 Spring (time of day)
x = [df_1989_Spring['ArrDelay']]
y = [df_1989_Spring['DepTime']]
plt.xlabel('ArrDelay')
plt.ylabel('DepTime')
plt.title('Plot of plane arrival delays over 24 hours in spring')
plt.plot(x, y, 'o', color='black')

### Scatterplot for 1989 Spring (day of the week)
x = [df_1989_Spring['ArrDelay']]
y = [df_1989_Spring['DayOfWeek']]
plt.xlabel('ArrDelay')
plt.ylabel('DayOfWeek')
plt.title('Plot of plane arrival delays over 7 days in spring')
plt.plot(x, y, 'o', color='black')

### Count for 1989 Spring early arrivals (day of the week)
Count_Of_1989_Spring_Weekly_Arrivals = df_1989_Spring.groupby(['DayOfWeek'])['DayOfWeek'].count()
print(Count_Of_1989_Spring_Weekly_Arrivals)

#### Count for 1989 Spring early arrivals (time of year)
Count_Of_1989_Spring_Monthly_Arrivals = df_1989_Spring.groupby(['Month'])['Month'].count()
print(Count_Of_1989_Spring_Monthly_Arrivals)

# Filter for 1989 Summer (Jun to Aug) and ArrDelay < 0
df_1989_Summer = pd.DataFrame(data_1989, columns=['Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'ArrTime', 'CRSArrTime', 'ArrDelay'])
df_1989_Summer = df_1989_Summer[(df_1989_Summer['Month'] >= 6) & (df_1989_Summer['Month'] <= 8)]
df_1989_Summer = df_1989_Summer[df_1989_Summer['ArrDelay'] < 0]
print(df_1989_Summer)

## Scatterplot for 1989 Summer (time of day)
x = [df_1989_Summer['ArrDelay']]
y = [df_1989_Summer['DepTime']]
plt.xlabel('ArrDelay')
plt.ylabel('DepTime')
plt.title('Plot of plane arrival delays over 24 hours in summer')
plt.plot(x, y, 'o', color='black')

### Scatterplot for 1989 Summer (day of the week)
x = [df_1989_Summer['ArrDelay']]
y = [df_1989_Summer['DayOfWeek']]
plt.xlabel('ArrDelay')
plt.ylabel('DayOfWeek')
plt.title('Plot of plane arrival delays over 7 days in spring')
plt.plot(x, y, 'o', color='black')

### Count for 1989 Summer early arrivals (day of the week)
Count_Of_1989_Summer_Weekly_Arrivals = df_1989_Summer.groupby(['DayOfWeek'])['DayOfWeek'].count()
print(Count_Of_1989_Summer_Weekly_Arrivals)

#### Count for 1989 Summer early arrivals (time of year)
Count_Of_1989_Summer_Monthly_Arrivals = df_1989_Summer.groupby(['Month'])['Month'].count()
print(Count_Of_1989_Summer_Monthly_Arrivals)

# Filter for 1989 Autumn (Sep to Nov) and ArrDelay < 0
df_1989_Autumn = pd.DataFrame(data_1989, columns=['Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'ArrTime', 'CRSArrTime', 'ArrDelay'])
df_1989_Autumn = df_1989_Autumn[(df_1989_Autumn['Month'] >= 9) & (df_1989_Autumn['Month'] <= 11)]
df_1989_Autumn = df_1989_Autumn[df_1989_Autumn['ArrDelay'] < 0]
print(df_1989_Autumn)

## Scatterplot for 1989 Autumn (time of day)
x = [df_1989_Autumn['ArrDelay']]
y = [df_1989_Autumn['DepTime']]
plt.xlabel('ArrDelay')
plt.ylabel('DepTime')
plt.title('Plot of plane arrival delays over 24 hours in autumn')
plt.plot(x, y, 'o', color='black')

### Scatterplot for 1989 Autumn (day of the week)
x = [df_1989_Autumn['ArrDelay']]
y = [df_1989_Autumn['DayOfWeek']]
plt.xlabel('ArrDelay')
plt.ylabel('DayOfWeek')
plt.title('Plot of plane arrival delays over 7 days in autumn')
plt.plot(x, y, 'o', color='black')

### Count for 1989 Autumn early arrivals (day of the week)
Count_Of_1989_Autumn_Weekly_Arrivals = df_1989_Autumn.groupby(['DayOfWeek'])['DayOfWeek'].count()
print(Count_Of_1989_Autumn_Weekly_Arrivals)

#### Count for 1989 Autumn early arrivals (time of year)
Count_Of_1989_Autumn_Monthly_Arrivals = df_1989_Autumn.groupby(['Month'])['Month'].count()
print(Count_Of_1989_Autumn_Monthly_Arrivals)

# Filter for 1989 Winter (Dec to Feb) and ArrDelay < 0
df_1989_Winter = pd.DataFrame(data_1989, columns=['Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'ArrTime', 'CRSArrTime', 'ArrDelay'])
df_1989_Winter = df_1989_Winter[(df_1989_Winter['Month'] >= 12) | (df_1989_Winter['Month'] <= 2)]
df_1989_Winter = df_1989_Winter[df_1989_Winter['ArrDelay'] < 0]
print(df_1989_Winter)

## Scatterplot for 1989 Winter (time of day)
x = [df_1989_Winter['ArrDelay']]
y = [df_1989_Winter['DepTime']]
plt.xlabel('ArrDelay')
plt.ylabel('DepTime')
plt.title('Plot of plane arrival delays over 24 hours in winter')
plt.plot(x, y, 'o', color='black')

### Scatterplot for 1989 Winter (day of the week)
x = [df_1989_Winter['ArrDelay']]
y = [df_1989_Winter['DayOfWeek']]
plt.xlabel('ArrDelay')
plt.ylabel('DayOfWeek')
plt.title('Plot of plane arrival delays over 7 days in winter')
plt.plot(x, y, 'o', color='black')

### Count for 1989 Winter early arrivals (day of the week)
Count_Of_1989_Winter_Weekly_Arrivals = df_1989_Winter.groupby(['DayOfWeek'])['DayOfWeek'].count()
print(Count_Of_1989_Winter_Weekly_Arrivals)

#### Count for 1989 Winter early arrivals (time of year)
Count_Of_1989_Winter_Monthly_Arrivals = df_1989_Winter.groupby(['Month'])['Month'].count()
print(Count_Of_1989_Winter_Monthly_Arrivals)
